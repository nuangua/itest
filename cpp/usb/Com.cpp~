#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>
#include <fcntl.h>
#include <termios.h>
#include <string.h>

#include "Com.h"

#define FALSE	-1
#define TRUE	0

/**
 *com port class
 *
 */


Com::~Com()
{
	//TODO
}

//open com port
int Com::openCom(char* port)
{
	serialport = port;
	fd = open(serialport, O_RDWR|O_NOCTTY|O_NDELAY);
	if(FALSE == fd)
	{
		perror("cannot open serial port\n");
		return FALSE;
	}
	if(fcntl(fd, F_SETFL, 0) < 0)
	{
		perror("fcntl failed\n");
		return FALSE;
	}
	if(0 == isatty(fd))
	{
		perror("standard input is not a terminal device\n");
		return FALSE;
	}
	return fd;
}

//close com port
void Com::closeCom()
{
	close(fd);
}

//set com port
int Com::setCom(int baud, int flow, int dataBit, int stopBit, int parity)
{
	struct termios options;
	if(0 != tcgetattr(fd, &options))
	{
		perror("setup serial error\n");
		return FALSE;
	}
	cfsetispeed(&options, B115200);
	cfsetospeed(&options, B115200);
	options.c_cflag |= CLOCAL;
	options.c_cflag |= CREAD;
	switch(flow)
	{
		case 0:
			options.c_cflag |= ~CRTSCTS;
			break;
		case 1:
			options.c_cflag |= CRTSCTS;
			break;
		case 2:
			options.c_cflag |= IXON | IXOFF | IXANY;
			break;
	}
	options.c_cflag &= ~CSIZE;
	switch(dataBit)
	{
		case 5:
			options.c_cflag |= CS5;
			break;
		case 6:
			options.c_cflag |= CS6;
			break;
		case 7:
			options.c_cflag |= CS7;
			break;
		case 8:
			options.c_cflag |= CS8;
			break;
		default:
			fprintf(stderr, "unsupported data size\n");
			return FALSE;
	}
	switch(parity)
	{
		case 'n':
		case 'N':
			options.c_cflag &= ~PARENB;
			options.c_iflag &= ~INPCK;
			break;
		case 'o':
		case 'O':
			options.c_cflag |= (PARODD | PARENB);
			options.c_iflag |= INPCK;
			break;
		case 'e':
		case 'E':
			options.c_cflag |= PARENB;
			options.c_cflag &= ~PARODD;
			options.c_iflag |= INPCK;
			break;
		case 's':
		case 'S':
			options.c_cflag &= ~PARENB;
			options.c_cflag &= ~CSTOPB;
			break;
		default:
			fprintf(stderr, "unsupported parity\n");
			return FALSE;
	}

	switch(stopBit)
	{
		case 1:
			options.c_cflag &= ~CSTOPB;
			break;
		case 2:
			options.c_cflag |= CSTOPB;
			break;
		default:
			fprintf(stderr, "unsupported stop bits\n");
			return FALSE;
	}
	options.c_oflag &= ~OPOST;
	options.c_cc[VTIME] = 1;
	options.c_cc[VMIN] = 1;
	tcflush(fd, TCIFLUSH);
	if(0 != tcsetattr(fd, TCSANOW, &options))
	{
		perror("com set error\n");
		return FALSE;
	}
	return TRUE;
}

int Com::writeCom(char* buf, int len)
{
	writeBuf = buf;
	int ret = write(fd, writeBuf, len);
	if(len == ret)
	{
		printf("write to %s: %s\n", serialport, writeBuf);
		return ret;
	} else {
		tcflush(fd, TCOFLUSH);
		printf("write to %s failed\n", serialport);
		return FALSE;
	}
}

int Com::readCom(char* buf, int len)
{
	readBuf = buf;
	int ret = read(fd, readBuf, len);
	printf("read from %s: %s\n", serialport, readBuf);
	return ret;
}
